# -*- coding: utf-8 -*-
"""
B∆Ø·ªöC 2: CHU·∫®N H√ìA M√î T·∫¢ & TR√çCH "REF"
L√†m s·∫°ch ph·∫ßn m√¥ t·∫£ text ƒë·ªÉ h·ªá th·ªëng d·ªÖ so s√°nh
"""

import pandas as pd
import re
import os
import warnings

warnings.filterwarnings('ignore')

# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
th∆∞_m·ª•c_output = 'code_du_an/output'
os.makedirs(th∆∞_m·ª•c_output, exist_ok=True)

print("=" * 80)
print("B∆Ø·ªöC 2: CHU·∫®N H√ìA M√î T·∫¢ & TR√çCH 'REF'")
print("=" * 80)

# T·∫£i d·ªØ li·ªáu
print("\n‚úì ƒêang t·∫£i d·ªØ li·ªáu...")
b·∫£ng_ng√¢n_h√†ng = pd.read_csv('code_du_an/data/bank_stmt.csv')

print(f"‚úì T·∫£i th√†nh c√¥ng: {len(b·∫£ng_ng√¢n_h√†ng)} d√≤ng")
print(f"‚úì C·ªôt: {b·∫£ng_ng√¢n_h√†ng.columns.tolist()}")

# ============================================================================
# H√ÄM CHU·∫®N H√ìA M√î T·∫¢
# ============================================================================

def chu·∫©n_h√≥a_m√¥_t·∫£(text):
    """Chuy·ªÉn ch·ªØ th∆∞·ªùng, b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát"""
    if pd.isna(text):
        return ""
    
    # Chuy·ªÉn ch·ªØ th∆∞·ªùng
    text = str(text).lower()
    
    # B·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát, gi·ªØ l·∫°i ch·ªØ c√°i, s·ªë, kho·∫£ng tr·∫Øng
    text = re.sub(r'[^a-z0-9\s]', '', text)
    
    # B·ªè kho·∫£ng tr·∫Øng th·ª´a
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text


def tr√≠ch_lo·∫°i_h·∫≠u_t·ªë(text):
    """Tr√≠ch lo·∫°i h·∫≠u t·ªë: CTY, TNHH, LTD, JSC"""
    if pd.isna(text):
        return "-"
    
    text = str(text).upper()
    
    # Danh s√°ch h·∫≠u t·ªë
    h·∫≠u_t·ªë_list = ['CTY', 'TNHH', 'LTD', 'JSC', 'CO', 'INC']
    
    for h·∫≠u_t·ªë in h·∫≠u_t·ªë_list:
        if h·∫≠u_t·ªë in text:
            return h·∫≠u_t·ªë
    
    return "-"


def tr√≠ch_m√£_ref(text):
    """Tr√≠ch m√£ ref ƒë·∫ßy ƒë·ªß (v√≠ d·ª•: TXN-1SWJC, USDTXN-HAFE, FEE-RJRN)"""
    if pd.isna(text):
        return "-"
    
    text = str(text).upper().strip()
    
    # Pattern ph·ªï bi·∫øn:
    patterns = [
        # TXN-XXXXX, USDTXN-XXXX
        r'(?:USD)?TXN-[A-Z0-9]+',
        # FEE-XXXX
        r'FEE-[A-Z0-9]+',
        # SRV-XXXXX
        r'SRV-[A-Z0-9]+',
        # PEND-XXXXX
        r'PEND-[A-Z0-9]+'
    ]
    
    # Th·ª≠ t·ª´ng pattern
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(0)
            
    # N·∫øu c√≥ trong c·ªôt ref, tr·∫£ v·ªÅ nguy√™n gi√° tr·ªã
    if text.startswith(('TXN-', 'FEE-', 'SRV-', 'PEND-', 'USDTXN-')):
        return text
    
    return "-"


def chu·∫©n_h√≥a_ti·ªÅn_t·ªá(text):
    """Chu·∫©n h√≥a ti·ªÅn t·ªá"""
    if pd.isna(text):
        return "VND"
    
    text = str(text).upper().strip()
    
    if text in ['USD', 'VND', 'EUR', 'GBP', 'JPY']:
        return text
    
    return "VND"


# ============================================================================
# B∆Ø·ªöC 1: CHU·∫®N H√ìA D·ªÆ LI·ªÜU
# ============================================================================

print("\n" + "=" * 80)
print("B∆Ø·ªöC 1: CHU·∫®N H√ìA D·ªÆ LI·ªÜU")
print("=" * 80)

# T·∫°o c√°c c·ªôt m·ªõi
b·∫£ng_ng√¢n_h√†ng['desc_clean'] = b·∫£ng_ng√¢n_h√†ng['desc'].apply(chu·∫©n_h√≥a_m√¥_t·∫£)
b·∫£ng_ng√¢n_h√†ng['ref_clean'] = b·∫£ng_ng√¢n_h√†ng['ref'].apply(tr√≠ch_m√£_ref)
b·∫£ng_ng√¢n_h√†ng['lo·∫°i_h·∫≠u_t·ªë'] = b·∫£ng_ng√¢n_h√†ng['desc'].apply(tr√≠ch_lo·∫°i_h·∫≠u_t·ªë)  # S·ª≠a t√™n c·ªôt
b·∫£ng_ng√¢n_h√†ng['currency_std'] = b·∫£ng_ng√¢n_h√†ng['currency'].apply(chu·∫©n_h√≥a_ti·ªÅn_t·ªá)

print("‚úì ƒê√£ chu·∫©n h√≥a m√¥ t·∫£ (desc_clean)")
print("‚úì ƒê√£ tr√≠ch m√£ ref (ref_clean)")
print("‚úì ƒê√£ tr√≠ch lo·∫°i h·∫≠u t·ªë (lo·∫°i_h·∫≠u_t·ªë)")
print("‚úì ƒê√£ chu·∫©n h√≥a ti·ªÅn t·ªá (currency_std)")

# ============================================================================
# B∆Ø·ªöC 2: T·∫†O FILE OUTPUT
# ============================================================================

print("\n" + "=" * 80)
print("B∆Ø·ªöC 2: T·∫†O FILE OUTPUT")
print("=" * 80)

# Ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
c·ªôt_output = ['txn_date', 'amount', 'desc_clean', 'ref_clean', 'lo·∫°i_h·∫≠u_t·ªë', 'currency_std']
b·∫£ng_output = b·∫£ng_ng√¢n_h√†ng[c·ªôt_output].copy()

# ƒê·ªïi t√™n c·ªôt
b·∫£ng_output.columns = ['txn_date', 'amount', 'desc_clean', 'ref_clean', 'lo·∫°i_h·∫≠u_t·ªë', 'currency']

# L∆∞u file
b·∫£ng_output.to_csv(f'{th∆∞_m·ª•c_output}/bank_clean.csv', index=False)
print(f"‚úì ƒê√£ l∆∞u: {th∆∞_m·ª•c_output}/bank_clean.csv")

# ============================================================================
# B∆Ø·ªöC 3: HI·ªÇN TH·ªä M·∫™U D·ªÆ LI·ªÜU
# ============================================================================

print("\n" + "=" * 80)
print("B∆Ø·ªöC 3: M·∫™U D·ªÆ LI·ªÜU ƒê·∫¶U TI√äN")
print("=" * 80)

print("\nüìä D·ªØ li·ªáu g·ªëc (5 d√≤ng ƒë·∫ßu):")
print(b·∫£ng_ng√¢n_h√†ng[['txn_date', 'amount', 'desc', 'ref', 'currency']].head().to_string(index=False))

print("\nüìä D·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a (5 d√≤ng ƒë·∫ßu):")
print(b·∫£ng_output.head().to_string(index=False))

# ============================================================================
# B∆Ø·ªöC 4: TH·ªêNG K√ä
# ============================================================================

print("\n" + "=" * 80)
print("B∆Ø·ªöC 4: TH·ªêNG K√ä")
print("=" * 80)

print(f"\nüìä T·ªïng s·ªë giao d·ªãch: {len(b·∫£ng_output)}")
print(f"üìä S·ªë c·ªôt: {len(b·∫£ng_output.columns)}")

print(f"\nüìä Ph√¢n b·ªë m√£ ref:")
for ref, count in b·∫£ng_output['ref_clean'].value_counts().items():
    print(f"  {ref}: {count}")

print(f"\nüìä Ph√¢n b·ªë lo·∫°i h·∫≠u t·ªë:")
for h·∫≠u_t·ªë, count in b·∫£ng_output['lo·∫°i_h·∫≠u_t·ªë'].value_counts().items():
    print(f"  {h·∫≠u_t·ªë}: {count}")

print(f"\nüìä Ph√¢n b·ªë ti·ªÅn t·ªá:")
for ti·ªÅn_t·ªá, count in b·∫£ng_output['currency'].value_counts().items():
    print(f"  {ti·ªÅn_t·ªá}: {count}")

print("\n" + "=" * 80)
print("‚úì B∆Ø·ªöC 2 HO√ÄN T·∫§T!")
print("=" * 80)
print(f"\nFile output: {th∆∞_m·ª•c_output}/bank_clean.csv")

