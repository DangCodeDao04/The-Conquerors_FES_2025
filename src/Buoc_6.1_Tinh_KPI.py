# -*- coding: utf-8 -*-
"""
B∆∞·ªõc 6.1 - T√≠nh to√°n KPI
üéØ M·ª•c ti√™u: T√≠nh c√°c ch·ªâ s·ªë hi·ªáu su·∫•t c·ªßa h·ªá th·ªëng
üìù C√°c KPI c·∫ßn t√≠nh:
    1. Auto-match rate: T·ª∑ l·ªá giao d·ªãch ƒë∆∞·ª£c gh√©p t·ª± ƒë·ªông
    2. Precision: ƒê·ªô ch√≠nh x√°c c·ªßa c√°c c·∫∑p ƒë∆∞·ª£c gh√©p
    3. Recall: T·ª∑ l·ªá t√¨m th·∫•y c√°c c·∫∑p ƒë√∫ng
    4. Latency: Th·ªùi gian x·ª≠ l√Ω (ƒë∆∞·ª£c t√≠nh trong qu√° tr√¨nh ch·∫°y)
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime

# === THI·∫æT L·∫¨P ƒê∆Ø·ªúNG D·∫™N ===
script_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(os.path.dirname(script_dir))
data_dir = os.path.join(root_dir, "data")
output_dir = os.path.join(root_dir, "output")

# === THI·∫æT L·∫¨P T√äN C√ÅC T·ªÜP ƒê·∫¶U V√ÄO/RA ===
MATCHED_PAIRS = os.path.join(output_dir, 'matched_pairs.csv')
BANK_STMT = os.path.join(data_dir, 'bank_stmt.csv')
ANSWER_KEY = os.path.join(data_dir, 'answer_key_sample.csv')
KPI_REPORT = os.path.join(output_dir, 'kpi_report.csv')

def calculate_metrics_by_type(system_df, truth_df, transaction_type=None):
    """T√≠nh to√°n c√°c metrics cho t·ª´ng lo·∫°i giao d·ªãch"""
    
    if transaction_type:
        system_matched = system_df[system_df['match_type'] == transaction_type]
        truth_matched = truth_df[truth_df['match_type'] == transaction_type]
    else:
        system_matched = system_df
        truth_matched = truth_df

    # T√≠nh True Positives (c√°c c·∫∑p gh√©p ƒë√∫ng)
    merged_df = pd.merge(system_matched, truth_matched, 
                        on=['bank_ref', 'gl_doc'], 
                        how='inner')
    true_positives = len(merged_df)
    
    # T√≠nh False Positives (c√°c c·∫∑p gh√©p sai)
    false_positives = len(system_matched) - true_positives
    
    # T√≠nh False Negatives (c√°c c·∫∑p b·ªè s√≥t)
    false_negatives = len(truth_matched) - true_positives
    
    # T√≠nh Precision
    precision = (true_positives / (true_positives + false_positives)) * 100 if (true_positives + false_positives) > 0 else 0
    
    # T√≠nh Recall
    recall = (true_positives / (true_positives + false_negatives)) * 100 if (true_positives + false_negatives) > 0 else 0
    
    # T√≠nh F1-Score
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
    
    return {
        'type': transaction_type if transaction_type else 'ALL',
        'total_pairs': len(system_matched),
        'true_positives': true_positives,
        'false_positives': false_positives,
        'false_negatives': false_negatives,
        'precision': precision,
        'recall': recall,
        'f1_score': f1_score
    }
    
    # --- KI·ªÇM TRA S·ª∞ T·ªíN T·∫†I C·ª¶A C√ÅC T·ªÜP ---
    required_files = [system_results_file, bank_statement_file, ground_truth_file]
    for f in required_files:
        if not os.path.exists(f):
            print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y t·ªáp '{f}'!")
            print("   -> Vui l√≤ng ƒë·∫£m b·∫£o t·ªáp n√†y t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi m√£.")
            return

    print("‚úÖ ƒê√£ t√¨m th·∫•y t·∫•t c·∫£ c√°c t·ªáp c·∫ßn thi·∫øt.")
    
    try:
        # ƒê·ªçc c√°c t·ªáp
        system_df = pd.read_csv(system_results_file)
        bank_df = pd.read_csv(bank_statement_file)
        truth_df = pd.read_csv(ground_truth_file)
        
        # --- 1. T√≠nh Auto-match Rate ---
        total_bank_txns = len(bank_df)
        # ƒê·∫£m b·∫£o c·ªôt 'match_status' t·ªìn t·∫°i
        if 'match_status' not in system_df.columns:
             print("‚ùå L·ªñI: T·ªáp 'matched_pairs.csv' ph·∫£i c√≥ c·ªôt 'match_status'.")
             return
        auto_matched_count = len(system_df[system_df['match_status'] == 'Matched'])
        auto_match_rate = (auto_matched_count / total_bank_txns) * 100 if total_bank_txns > 0 else 0

        # --- 2. T√≠nh Precision v√† Recall ---
        system_matched = system_df[system_df['match_status'] == 'Matched'][['bank_ref', 'gl_doc']].dropna()
        merged_df = pd.merge(system_matched, truth_df, on=['bank_ref', 'gl_doc'], how='inner')
        
        true_positives = len(merged_df)
        false_positives = len(system_matched) - true_positives
        false_negatives = len(truth_df) - true_positives
        
        precision = (true_positives / (true_positives + false_positives)) * 100 if (true_positives + false_positives) > 0 else 0
        recall = (true_positives / (true_positives + false_negatives)) * 100 if (true_positives + false_negatives) > 0 else 0
        
        print("‚úÖ ƒê√£ t√≠nh to√°n xong c√°c ch·ªâ s·ªë KPI.")

        # --- 3. Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
        kpi_summary = {
            'KPI': ['Auto-match rate', 'Precision', 'Recall', 'Latency'],
            'Value': [f"{auto_match_rate:.2f}%", f"{precision:.2f}%", f"{recall:.2f}%", "N/A"],
            'Description': [
                'T·ª∑ l·ªá giao d·ªãch ƒë∆∞·ª£c h·ªá th·ªëng t·ª± ƒë·ªông ƒë·ªëi so√°t th√†nh c√¥ng.',
                'Trong s·ªë c√°c c·∫∑p ƒë∆∞·ª£c n·ªëi t·ª± ƒë·ªông, c√≥ bao nhi√™u % l√† ƒë√∫ng.',
                'Trong t·ªïng s·ªë c√°c c·∫∑p ƒë√∫ng, h·ªá th·ªëng t√¨m th·∫•y ƒë∆∞·ª£c bao nhi√™u %.',
                'Th·ªùi gian x·ª≠ l√Ω (c·∫ßn ƒëo l∆∞·ªùng th·ªß c√¥ng khi ch·∫°y quy tr√¨nh).'
            ]
        }
        kpi_df = pd.DataFrame(kpi_summary)
        
        print("\n" + "="*50)
        print("              B·∫¢NG T·ªîNG H·ª¢P KPI              ")
        print("="*50)
        print(kpi_df.to_markdown(index=False, tablefmt="grid"))
        print("="*50)

    except Exception as e:
        print(f"üòï ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")

# --- Ch·∫°y h√†m ch√≠nh ---
if __name__ == "__main__":
    calculate_kpis()