# -*- coding: utf-8 -*-
"""
B∆∞·ªõc 6.1 - T√≠nh to√°n KPI
üéØ M·ª•c ti√™u: T√≠nh c√°c ch·ªâ s·ªë hi·ªáu su·∫•t c·ªßa h·ªá th·ªëng
üìù C√°c KPI c·∫ßn t√≠nh:
    1. Auto-match rate: T·ª∑ l·ªá giao d·ªãch ƒë∆∞·ª£c gh√©p t·ª± ƒë·ªông
    2. Precision: ƒê·ªô ch√≠nh x√°c c·ªßa c√°c c·∫∑p ƒë∆∞·ª£c gh√©p
    3. Recall: T·ª∑ l·ªá t√¨m th·∫•y c√°c c·∫∑p ƒë√∫ng
    4. Latency: Th·ªùi gian x·ª≠ l√Ω (ƒë∆∞·ª£c t√≠nh trong qu√° tr√¨nh ch·∫°y)
"""

import pandas as pd
import numpy as np
import os
from datetime import datetime

# === THI·∫æT L·∫¨P ƒê∆Ø·ªúNG D·∫™N ===
script_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(script_dir)  # Th∆∞ m·ª•c code_du_an/code_du_an
data_dir = os.path.join(root_dir, "data")  # data n·∫±m trong code_du_an/code_du_an/data
output_dir = os.path.join(root_dir, "output")  # output n·∫±m trong code_du_an/code_du_an/output

# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
os.makedirs(output_dir, exist_ok=True)

print("=== ƒê∆Ø·ªúNG D·∫™N ===")
print(f"Script dir: {script_dir}")
print(f"Root dir: {root_dir}")
print(f"Data dir: {data_dir}")
print(f"Output dir: {output_dir}")

# === THI·∫æT L·∫¨P T√äN C√ÅC T·ªÜP ƒê·∫¶U V√ÄO/RA ===
MATCHED_PAIRS = os.path.join(output_dir, 'matched_pairs.csv')
BANK_STMT = os.path.join(data_dir, 'bank_stmt.csv')
ANSWER_KEY = os.path.join(data_dir, 'answer_key_sample.csv')
KPI_REPORT = os.path.join(output_dir, 'kpi_report.csv')

def calculate_metrics_by_type(system_df, truth_df, transaction_type=None):
    """T√≠nh to√°n c√°c metrics cho t·ª´ng lo·∫°i giao d·ªãch"""
    
    if transaction_type:
        system_matched = system_df[system_df['match_type'] == transaction_type]
        truth_matched = truth_df[truth_df['match_type'] == transaction_type]
    else:
        system_matched = system_df
        truth_matched = truth_df

    # T√≠nh True Positives (c√°c c·∫∑p gh√©p ƒë√∫ng)
    merged_df = pd.merge(system_matched, truth_matched, 
                        on=['bank_ref', 'gl_doc'], 
                        how='inner')
    true_positives = len(merged_df)
    
    # T√≠nh False Positives (c√°c c·∫∑p gh√©p sai)
    false_positives = len(system_matched) - true_positives
    
    # T√≠nh False Negatives (c√°c c·∫∑p b·ªè s√≥t)
    false_negatives = len(truth_matched) - true_positives
    
    # T√≠nh Precision
    precision = (true_positives / (true_positives + false_positives)) * 100 if (true_positives + false_positives) > 0 else 0
    
    # T√≠nh Recall
    recall = (true_positives / (true_positives + false_negatives)) * 100 if (true_positives + false_negatives) > 0 else 0
    
    # T√≠nh F1-Score
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
    
    return {
        'type': transaction_type if transaction_type else 'ALL',
        'total_pairs': len(system_matched),
        'true_positives': true_positives,
        'false_positives': false_positives,
        'false_negatives': false_negatives,
        'precision': precision,
        'recall': recall,
        'f1_score': f1_score
    }

def main():
    """H√†m ch√≠nh ƒë·ªÉ t√≠nh to√°n KPI"""
    print("\n=== B∆Ø·ªöC 6.1: T√çNH TO√ÅN KPI ===")
    
    # 1. Ki·ªÉm tra files
    required_files = [MATCHED_PAIRS, BANK_STMT, ANSWER_KEY]
    for f in required_files:
        if not os.path.exists(f):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {f}")
            return

    try:
        # 2. ƒê·ªçc d·ªØ li·ªáu
        print("‚úì ƒêang ƒë·ªçc d·ªØ li·ªáu...")
        system_df = pd.read_csv(MATCHED_PAIRS)
        bank_df = pd.read_csv(BANK_STMT)
        truth_df = pd.read_csv(ANSWER_KEY)
        
        # 3. Chu·∫©n b·ªã d·ªØ li·ªáu
        print("\nC·∫•u tr√∫c d·ªØ li·ªáu:")
        print("C√°c c·ªôt trong system_df:", system_df.columns.tolist())
        
        # X·ª≠ l√Ω match_type
        if 'match_type' not in system_df.columns:
            # Ph√¢n lo·∫°i giao d·ªãch d·ª±a v√†o ƒë·ªãnh d·∫°ng bank_ref
            def determine_type(bank_ref):
                if isinstance(bank_ref, str):
                    if bank_ref.startswith('TXN-'):
                        return 'TUITION'
                    elif bank_ref.startswith('FEE-'):
                        return 'BANKFEE'
                    elif bank_ref.startswith('USDTXN-'):
                        return 'FX_USD_to_VND'
                    elif bank_ref.startswith('SRV-'):
                        return 'SERVICE'
                return 'UNKNOWN'
            
            system_df['match_type'] = system_df['bank_ref'].apply(determine_type)
            print("‚úì ƒê√£ t·∫°o c·ªôt match_type d·ª±a v√†o ƒë·ªãnh d·∫°ng bank_ref")
        else:
            system_df['match_type'] = system_df['match_type'].fillna('UNKNOWN')
            print("‚úì ƒê√£ ƒëi·ªÅn gi√° tr·ªã UNKNOWN cho match_type thi·∫øu")
        
        # 4. T√≠nh Auto-match rate t·ªïng th·ªÉ
        total_bank_txns = len(bank_df)
        auto_matched = len(system_df)
        auto_match_rate = (auto_matched / total_bank_txns) * 100

        # 5. T√≠nh metrics cho t·ª´ng lo·∫°i giao d·ªãch
        transaction_types = ['TUITION', 'BANKFEE', 'FX_USD_to_VND', 'SERVICE']
        metrics_results = []
        
        # T√≠nh cho t·∫•t c·∫£ c√°c giao d·ªãch
        overall_metrics = calculate_metrics_by_type(system_df, truth_df)
        metrics_results.append(overall_metrics)
        
        # T√≠nh cho t·ª´ng lo·∫°i giao d·ªãch
        for tx_type in transaction_types:
            metrics = calculate_metrics_by_type(system_df, truth_df, tx_type)
            metrics_results.append(metrics)

        # 6. T·∫°o b√°o c√°o
        print("\n=== B√ÅO C√ÅO KPI ===")
        print(f"\nAuto-match rate: {auto_match_rate:.2f}%")
        
        # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£
        report_df = pd.DataFrame(metrics_results)
        
        # ƒê·ªãnh d·∫°ng c√°c c·ªôt s·ªë
        for col in ['precision', 'recall', 'f1_score']:
            report_df[col] = report_df[col].round(2)
            
        # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
        print("\nChi ti·∫øt theo lo·∫°i giao d·ªãch:")
        print("="*80)
        print(report_df.to_string(index=False))
        print("="*80)
        
        # L∆∞u b√°o c√°o
        report_df.to_csv(KPI_REPORT, index=False)
        print(f"\n‚úì ƒê√£ l∆∞u b√°o c√°o KPI v√†o: {KPI_REPORT}")

    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        raise e

if __name__ == "__main__":
    start_time = datetime.now()
    main()
    end_time = datetime.now()
    processing_time = (end_time - start_time).total_seconds()
    print(f"\nLatency: {processing_time:.2f} seconds")